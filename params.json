{"name":"Ball-v2.0","tagline":"ELEC 327 Mid_term project reimplementation","body":"# Ball-V2.0\r\nELEC 327 Midterm Project - Smart Height Measuring Device\r\n#### Group Members: Ethan Yuqiang Heng, Thomas Tingkai Liu, Bill Yiqiu Wang\r\n## Central Concepts\r\n>•MOTION !\r\n\r\n>•Distance=0.5*g*time^2(g=981cms^-2)\r\n\r\n>•The device generally have inelastic collision with the ceiling, hence we neglect the initial acceleration (beyond g) when the device starts to free fall\r\n\r\n## Functionality\r\n>In a room, user can repetitively throw this device to hit the ceiling and let the device free fall to the floor, and the device will calculate the distance of free fall and take the average.\r\n\r\n## Push Button Inputs\r\n>1. Press button for 0.4 seconds or longer but shorter than 1.5 seconds – the device will calculate the current distance measured and average into the previous measurements. Then it immediately gives the output.\r\n\r\n>2. Press button for 1.5 seconds or longer – the device will discard the current measurement and get ready for the next measurement.\r\n\r\n>3. Press button twice quickly – the device will reset itself and get ready for a new set of measurements.\r\n\r\n## Led Outputs\r\n1. The device gives output in decimal number with unit cm:\r\n\r\n>a. Red LED: 100 * number of blinks\r\n\r\n>b. Green LED: 10 * number of blinks\r\n\r\n>c. Purple LED: 1 * number of blinks\r\n\r\n>Eg. 3 Red blinks + 2 Green blinks * 1 Purple blink = 3*100 + 2*10 +1 = 321cm\r\n\r\n2. Discard – Red Red short blink\r\n\r\n3. Reset – Red Green Blue short blink\r\n\r\n## PCB Design\r\n![PCB](https://github.com/ethanwhassat/Ball-V2.0/blob/master/pcb.png?raw=true)\r\n\r\n• Compact design\r\n\r\n>We would not want a huge PCB, which is clumsy and also unsafe when tossed with higher distance.\r\n\r\n• Fall proof\r\n\r\n>A larger PCB is also more prone to damage given because it has higher inertia. Use of simple components also gives a higher reliability.\r\n\r\n## Software Design\r\n\r\nThe code focuses on the following things:\r\n\r\n>• Extending the functionality and control based on a hardware design with few components. We could not use an LCD display because tossing would easily damage it, hence we used SPI LED and used three different colors to represent the 100, 10 and 1 digits of a number. This is accurate and interesting. We also extended the functionality of the button by setting different patterns of pressing, instead of multiple buttons.\r\n\r\n>• Increasing accuracy given the unpredictability of tossing. Multiple tosses can have slight variations, taking average increases accuracy to great extends. Sometimes a toss can be bad, and it would be time-consuming to start over the entire measurement, hence user are allowed to discard a toss and continue the measurement.\r\n\r\n>• Low power. The entire design utilized multiple timers to achieve low power. The CPU would be off during most of the time, and most of the jobs are done in interrupts.\r\n\r\n## Code Structure\r\n\r\n• Settings\r\n\r\n>o WDT settings\r\n\r\n>o Timer settings\r\n\r\n>o SPI settings\r\n\r\n>o Port 2 Settings\r\n\r\n>o Enter Low Power Mode and Enable Interrupts\r\n\r\n• Port 2 Interrupts\r\n\r\n>o Vibration Sensor\r\n\r\n>o Timer1\r\n\r\n>o Timer2 o Push Button\r\n\r\n>o Average o Discard o Reset\r\n\r\n####• WDT Interrupts\r\n\r\n>o Increment timers\r\n\r\n## Challenges\r\n\r\n1. A normal toss of the device might trigger the vibration switch 2-5 times, it’s important for the software to recognize the correct time interval. There are roughly four cases of different triggering situations:\r\n\r\n>a. Case 1: Triggered when hit ceiling, hit floor.\r\n\r\n>b. Case 2: Triggered when tossed, hit ceiling, hit floor.\r\n\r\n>c. Case 3: Triggered when tossed, hit ceiling, hit floor, bounced on floor for 1 or 2 times.\r\n\r\n>d. Case 4: Triggered when hit ceiling, hit floor, bounced on floor for 1 or 2 times.\r\n\r\n>Based on the complicated situations, one thing we can first make sure is that in one round of measurement, any vibration switch trigger after the third one is redundant. In the first two time intervals in between three triggers, the correct time interval between ceiling and floor triggering must be the longer one. This is because it takes shorter to arrive at the ceiling due to initial acceleration and shorter distance; and the bounce most likely has a much shorter distance. Based on these facts, it helps to distinguish the correct interval.\r\n\r\n2. Vibration Switch debouncing. The general idea of the debouncing of this sensor is similar to the push button, but from later observations: the vibration switch “vibrates” for a long time after it is impacted, because the connection of the sensor and the PCB acts like a pivot for the sensor to vibrate around. We solved this problem in both hardware and software.\r\n\r\n>a. Hardware: We inserted the sensor further into the PCB to reduce unwanted vibrations.\r\n![illr](https://github.com/ethanwhassat/Ball-V2.0/blob/master/illr.png?raw=true)\r\n\r\n>b. Software: an additional debouncing time is added to the vibration sensor.\r\n\r\n3. Time measurement calibration. We realize that the WDT is not very accurate when measuring time interval, which is essential in our measurement. Therefore, we took a long time calibrating the WDT by tracking our counter in the debug of CCS using stopwatch. In the end, we created a time calibration variable timeCalibration to adjust the accuracy in different circumstances.\r\n\r\n## Further Improvements\r\n\r\n>1. Though we have a focus on low power, we still used some __delay_cycles() function mainly in LED display interval and vibration switch debouncing. This can be improved by using WDT timer for LED display intervals and moving vibration switch to ports other than port2, and use another timer to do the debouncing, which we could not do now because vibration switch requires a different debouncing scheme to that of the button, which we did not think of when making our first PCB.\r\n\r\n>2. Despite the fact that the current device gives pretty accurate measurements, it would be better to use accelerometers to measure initial accelerations and integrate over time to measure the most accurate distance. But given the limited calculation capability of the MSP430 and few choices of sensors, we eventually decided on a simpler but much more reliable, low-power and compact design like this.\r\n\r\n## Results & Demo\r\n\r\n#### Demo1\r\n[Functionality Demo](https://www.youtube.com/watch?v=v2mgXxUTHiQ)\r\n\r\n#### Demo2\r\n[Actual Demo](https://www.youtube.com/watch?v=Y2OUF5_TQY8&feature=youtu.be)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}